--- /home/alexander/Libraries/commons-lang3-3.3.2-src/src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java
+++ /home/alexander/Libraries/changed/AtomicInitializerTest.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
+ * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * the License. You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,25 +15,50 @@
  * limitations under the License.
  */
 package org.apache.commons.lang3.concurrent;
-
+import org.junit.Test;
 /**
  * Test class for {@code AtomicInitializer}.
  *
- * @version $Id: AtomicInitializerTest.java 1088899 2011-04-05 05:31:27Z bayard $
+ * @version $Id$
  */
 public class AtomicInitializerTest extends AbstractConcurrentInitializerTest {
-    /**
-     * Returns the initializer to be tested.
-     *
-     * @return the {@code AtomicInitializer}
-     */
-    @Override
-    protected ConcurrentInitializer<Object> createInitializer() {
-        return new AtomicInitializer<Object>() {
-            @Override
-            protected Object initialize() throws ConcurrentException {
-                return new Object();
-            }
-        };
-    }
+	private Exception testCauseException;
+	private String testExceptionMessage;
+	public AtomicInitializerTest() {
+		testExceptionMessage = "x-test-exception-message-x";
+		testCauseException = new Exception(testExceptionMessage);
+	}
+	@Test
+	public void testGetConcurrentWithException ()
+			throws ConcurrentException, InterruptedException {
+		super.testGetConcurrentWithException(testExceptionMessage, testCauseException);
+	}
+	/**
+	 * Returns the initializer to be tested.
+	 *
+	 * @return the {@code AtomicInitializer}
+	 */
+	@Override
+	protected ConcurrentInitializer<Object> createInitializer() {
+		return new AtomicInitializer<Object>() {
+			@Override
+			protected Object initialize() throws ConcurrentException {
+				return new Object();
+			}
+		};
+	}
+	@Override
+	protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {
+		return new ExceptionThrowingAtomicSafeInitializerTestImpl();
+	}
+	/**
+	 * A concrete test implementation of {@code AtomicSafeInitializer}. This
+	 * implementation always throws an exception.
+	 */
+	private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {
+		@Override
+		protected Object initialize() throws ConcurrentException {
+			throw new ConcurrentException(testExceptionMessage, testCauseException);
+		}
+	}
 }
